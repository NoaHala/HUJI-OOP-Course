noahalaly

Additional Questions:
1. The strategies for the automatic players:
    a.'whatever' - As requested, the coordinate for each turn is random.
    b.'clever' - Chooses coordinates in ascending order:
                 Begins in (row:0,col:0) and continues along the entire line.
                 When it reaches the end of the line, continues to the
                 beginning of the next line.
    c.'genius' - Works similar to 'clever' but begins in (row:0,col:1) and
                 continues along the entire *column*. When it reaches the end
                 of the column, continues to the beginning of the next column.
                 When it reaches the end of the board, it continues
                 cyclically to its beginning.

2. As said in the question, we designed this project in such a way that each of the
 players classes implements the common 'player' interface. By doing this we are using
 the core principles that we've learned - Polymorphism and Abstraction. The main
 advantage or motive to use those is for generic programming. in this example project
 we can add or remove as many players types as we want without having to or modify
 any other class (the open-close principle). designing our program like that
 allowing not only us, but also different programmers extend our code without the need
 to have deep understanding of our implementation (Decouples our implementation from
 the usage of the code) which also make it easier to understand.
